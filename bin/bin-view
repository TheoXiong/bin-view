#!/usr/bin/env node

const path = require('path')
const chalk = require('chalk')
const { binaryToHexStr } = require('../lib/convert.js')
const { parseArgv } = require('../lib/util.js')

const COMMANDS = ['-l', '-s']

const show = async (filePath, options) => {
  let hexStr = await binaryToHexStr(filePath, options)
    .catch(err => { throw err })

  console.log()
  console.log(chalk.green(`  File: ${filePath} `))
  console.log('---------------------------------------------------------')
  console.log(hexStr)
  console.log('---------------------------------------------------------')
  return true
}

const run = async (input, options) => {
  console.log()
  console.log(chalk.bold.rgb(255, 255, 0)('  Start.'))
  console.log()

  let successedNum = 0
  let failedNum = 0

  for (let i = 0; i < input.params.length; i++) {
    let result = true
    const filePath = path.resolve(input.params[i])
    await show(filePath, options)
      .catch(err => {
        failedNum++
        result = false
        console.log(chalk.red(`  [ Error ] ${err.message}`))
      })

    if (!result) continue
    successedNum++
  }

  console.log()
  console.log(chalk.rgb(255, 255, 0)(`  ${successedNum} successed, ${failedNum} failed.`))
  console.log(chalk.bold.rgb(255, 255, 0)('  Done.'))
  console.log()
  return true
}

const help = () => {
  console.log('Usage: bin view [options] <paths>')
  console.log()
  console.log('Options: ')
  console.log('  -l    specify the byte length to view')
  console.log('  -s    hidden line number')
  console.log()
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # default usage'))
  console.log('    $ bin view bin-file-path')
  console.log()
  console.log(chalk.gray('    #view multiple files'))
  console.log('    $ bin view bin-file-path1 bin-file-path2 bin-file-path3')
  console.log()
  console.log(chalk.gray('    # specify the byte length'))
  console.log('    $ bin view -l 100 bin-file-path')
  console.log()
  console.log(chalk.gray('    # hidden line number'))
  console.log('    $ bin view -s line=0 bin-file-path')
  console.log()
}

let argv = process.argv
if (argv && argv.length >= 3) {
  let input = parseArgv(argv, COMMANDS)
  if (!(input && input.params)) return help()
  let options = {}
  if (input.cmds && Object.keys(input.cmds).length > 0) {
    if (input.cmds['-l']) {
      options.targetLength = input.cmds['-l']
    }
    if (input.cmds['-s'] === 'line=0') {
      options.line = false
    }
  }

  run(input, options)
} else {
  help()
}
